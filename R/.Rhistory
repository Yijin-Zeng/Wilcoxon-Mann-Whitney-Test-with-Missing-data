X <- c(1,2,NA,4,5)
Y <- c(3,NA,6,7)
library(devtools)
load_all()
wmwm.test(X,Y)
boundsSumRank(X,Y)
boundsSumRank(X,Y, ties = FALSE)
?stats::pwilcox
stats::pwilcox(20,10,5)
stats::pwilcox(20,5,10)
stats::pwilcox(20,5,10, lower.tail = FALSE)
X <- c(1,2,NA,4,5)
Y <- c(3,6,7,NA)
boundsPValueNoTies(X,Y, alternative = 'two.sided', exact = TRUE)
library(devtools)
load_all()
X <- c(1,1,NA,4,5)
Y <- c(3,6,7,NA)
boundsPValueWithTies(X,Y, 'two.sided', 1, Inf, exact = None)
boundsPValueWithTies(X,Y, 'two.sided', 1, Inf, exact = NONE)
boundsPValueWithTies(X,Y, 'two.sided', 1, Inf, exact = NULL)
boundsPValueWithTies(X,Y, 'two.sided', 1, Inf, exact = NULL, correct = TRUE)
# Sample size
n <- length(X)
m <- length(Y)
# Observed samples in X and Y, respectively
X_prime <- X[!is.na(X)]
Y_prime <- Y[!is.na(Y)]
Z_prime <- c(X_prime, Y_prime)
r <- rank(Z_prime)
# Observed sample size
n_prime <- length(X_prime)
m_prime <- length(Y_prime)
# Compute bounds of WMWS tatistic using boundsWMWStatistic function
Bounds <- boundsWMWStatistic(X, Y, ties = TRUE, lower.boundary = lower.boundary,
upper.boundary = upper.boundary)
lowerBoundWMWStatistic <- Bounds[1]
upperBoundWMWStatistic <- Bounds[2]
# Decide if exact
if(is.null(exact)){
exact <- (n < 50) && (m < 50)
}
if(exact){
warning("cannot bound exact p-value with ties")
exact <- 0
}
# using normal approximation
correct_lower <- 0
correct_upper <- 0
if(correct){
correct_lower <- switch(alternative,
"two.sided" = sign((lowerBoundWMWStatistic - n*m/2)) * 0.5,
"greater" = 0.5,
"less" = -0.5)
correct_upper <- switch(alternative,
"two.sided" = sign((upperBoundWMWStatistic - n*m/2)) * 0.5,
"greater" = 0.5,
"less" = -0.5)
}
nties <- table(r)
nties
install.packages("reticulate")
library(devtools)
load_all()
check()
usethis::use_testthat()
devtools::test()
getwd(
)
?wilcox.test
library(devtools)
?wilcox.test
?wmwm.test
load_all()
?wmwm.test
document()
?wmwm.test
document()
?wmwm.test
install()
?document
?wmwm.test
?wmwm.test
?eummd
install.packages('eummd')
?eummd
?eummd::eummd\
?eummd::eummd
document()
?wmwm.test
install()
?wmwm.test
?wmwm.test
document()
?wmwm.test
install()
?wmwm.test
document()
?wmwm.test
library('devtools')
load_all()
install()
?wmwm.test
document()
?wmwm.test
install()
?wmwm.test
document()
?wmwm.test
library('devtools')
install()
?wmwm.test
?wmwm.test
load_all()
?wmwm.test
?wmwm.test
library(devtools)
load_all()
install()
?wmwm.test
?eummd::eummd
?document
document()
?wmwm.test
?wmwm.test
document()
?wmwm.test
?document
document()
?wmwm.test
document()
?wmwm.test
?eummd
?wmwm.test
document()
?wmwm.test
install()
?wmwm.test
library('devtools')
load_all()
install()
document()
?wmwm.test
install()
?wmwm.test
?eummd::eummd
document()
?wmwm.test
?wilcox.test
?document
document()
wmwm.test()
?wmwm.test
?document
document()
?wmwm.test
?document
document()
?wmwm.test
document()
install
install()
?wmwm.test
?wmwm.test
document()
?wmwm.test
install()
?wmwm.test
load_all()
?wmwm.test
library(devtools)
load_all()
install()
?wmwm.test
?wmwm.test
?momentchi
?momentchi2
?momentchi2
?momentchi2::`momentchi2-package`
?momentchi2::momentchi2
document()
?wmwm.test
?wmwm
?wmwm
?momentchi2
?`wmwm-package`
document()
document()
?`wmwm-package`
document()
?`wmwm-package`
?wmwm.test
?momentchi2
load_all()
install()
library(devtools)
load_all()
install()
?wmwm.test
?wmwm.test
library(devtools)
document()
?wmwm.test
install()
?wmwm.test
document()
?wmwm.test
install()
?wmwm.test
document()
?wmwm.test
install()
?wmwm.test
library(devtools)
load_all()
install()
?wmwm.test
document()
?wmwm.test
